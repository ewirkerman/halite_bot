from hlt2 import *
from moves import Move
import socket
import traceback
from ctypes import *
import sys
import logging
import traceback
from random import shuffle

map_logger = logging.getLogger('bot')
try:
	if len(map_logger.handlers) < 1:
		base_formatter = logging.Formatter("%(asctime)s : %(levelname)s %(message)s")
		log_file_name = 'bot.debug'
		hdlr = logging.FileHandler(log_file_name)
		hdlr.setFormatter(base_formatter)
		hdlr.setLevel(logging.DEBUG)
		#map_logger.addHandler(hdlr)
		#map_logger.setLevel(logging.DEBUG)	
except NameError:
	pass

test_inputs = [
"625 0 1 1 1224 0 1 2 649 0 78 76 73 75 87 101 114 130 146 151 144 132 106 70 45 37 40 42 42 42 41 41 43 48 55 61 61 60 63 75 90 100 106 108 105 96 89 78 61 49 49 56 58 55 53 53 54 53 58 69 83 83 81 83 89 95 102 119 141 155 158 148 116 71 40 30 30 31 32 31 29 29 35 42 47 49 51 55 57 63 71 75 72 67 62 55 53 54 53 52 57 67 68 60 54 52 52 51 56 70 73 82 90 94 91 83 77 83 99 118 135 135 107 64 37 27 26 27 28 26 23 25 33 43 47 48 52 58 58 55 53 51 46 42 38 34 34 40 47 51 55 63 64 56 46 41 39 38 43 56 66 88 105 109 98 80 65 59 63 79 102 111 91 56 33 26 26 28 29 27 25 27 34 43 47 48 51 56 55 48 40 35 31 29 28 25 25 32 41 47 52 61 65 59 46 36 29 26 30 43 68 99 118 119 106 87 69 55 51 59 78 89 76 50 33 28 31 35 37 37 33 32 34 39 42 44 45 48 47 43 37 31 28 27 25 22 23 30 40 48 56 67 75 70 53 36 25 20 23 39 71 101 119 119 107 91 76 64 58 56 63 69 62 46 37 37 42 50 54 53 46 39 35 37 40 42 40 39 41 41 39 36 32 30 26 23 27 40 55 65 72 79 85 80 63 43 29 21 23 40 73 96 110 113 105 92 83 80 77 65 55 53 50 45 44 49 58 68 75 72 59 46 40 41 43 42 35 32 34 38 39 38 35 32 28 26 36 62 91 103 101 92 86 82 73 57 42 32 33 48 82 94 102 107 106 98 94 94 91 71 52 43 42 44 49 56 67 80 88 87 73 58 50 50 50 44 33 26 26 30 32 33 32 31 27 27 44 84 129 146 134 103 83 79 81 74 63 55 57 67 101 102 104 111 117 114 107 101 91 70 51 43 41 41 44 51 65 82 94 97 90 77 66 60 54 44 31 22 20 22 25 30 33 34 30 30 46 89 138 155 141 106 81 78 87 91 89 90 95 99 127 121 120 126 136 134 123 105 88 72 63 58 52 44 39 44 60 82 96 105 108 99 85 71 58 44 29 20 17 19 24 32 39 41 38 33 43 75 115 130 123 103 90 89 97 107 118 131 140 135 150 145 141 138 145 145 133 112 95 91 94 90 77 57 42 41 57 78 92 104 111 106 93 79 65 50 33 22 19 22 28 35 41 42 38 33 38 62 95 112 115 115 117 116 116 121 136 157 167 160 147 149 146 138 141 143 136 118 107 114 125 121 103 72 49 44 55 73 87 97 100 94 86 79 70 58 42 32 30 35 40 43 41 37 32 29 36 59 91 112 121 134 146 149 140 133 134 147 154 149 111 119 124 125 136 140 132 112 101 111 125 123 106 77 54 49 60 78 93 102 98 88 77 72 69 65 54 47 47 52 57 57 49 40 32 28 36 59 90 109 117 129 141 146 138 123 111 109 110 108 80 88 98 112 133 140 128 101 84 92 109 111 98 74 55 53 67 90 108 115 106 90 74 63 61 62 61 59 60 64 68 66 58 48 37 30 34 55 85 102 104 104 105 105 98 88 78 76 78 77 66 68 75 91 114 124 113 88 72 82 104 110 96 72 54 53 70 95 111 113 100 86 70 59 55 57 59 60 62 65 66 64 58 51 41 31 32 52 83 100 96 85 75 67 60 57 59 67 71 69 61 57 59 70 86 94 89 73 66 81 108 114 97 70 50 47 62 84 93 88 77 70 63 56 50 48 48 50 54 59 60 56 50 45 38 30 34 58 92 107 98 79 62 49 42 42 53 69 75 70 63 60 61 69 81 87 82 71 67 80 101 106 92 69 50 44 54 70 73 64 56 55 54 50 44 39 37 40 48 55 55 50 43 38 33 30 38 65 98 108 94 73 56 46 40 40 50 65 72 69 71 70 73 83 95 100 92 80 75 76 81 81 76 68 57 50 53 62 62 54 47 46 46 43 38 33 34 39 47 54 53 48 41 35 30 30 39 62 87 92 78 62 54 52 50 47 50 60 69 72 72 70 71 79 90 92 86 83 80 73 63 58 62 68 67 61 58 60 59 52 45 39 36 34 31 32 37 45 52 56 54 50 44 38 33 32 38 51 63 64 56 49 50 55 56 51 50 56 66 71 58 57 56 59 62 62 63 70 72 61 46 40 48 65 71 69 65 63 61 55 45 35 28 26 27 33 44 55 61 61 59 58 55 49 44 41 41 43 44 41 36 33 37 41 42 38 37 42 51 57 45 44 42 40 38 38 44 56 60 49 34 29 41 62 75 78 74 68 64 59 48 36 28 24 26 35 51 67 73 72 71 71 68 63 60 57 51 46 38 30 25 23 25 26 25 22 24 30 37 43 38 36 33 29 26 26 33 44 48 39 27 25 37 58 76 84 82 75 71 66 55 43 34 29 31 40 58 75 80 77 77 78 73 70 72 72 64 54 41 31 24 22 21 20 17 15 19 26 33 38 34 32 30 25 21 20 25 33 36 31 24 24 35 55 74 84 82 78 77 73 62 50 42 39 42 49 61 72 72 66 67 68 65 63 69 74 71 62 46 34 27 24 23 20 16 14 18 25 31 34 33 32 31 25 19 17 19 24 27 26 25 30 41 57 71 77 74 72 74 72 61 50 45 46 51 55 58 60 54 46 44 46 44 45 53 64 70 66 52 40 33 30 28 25 21 18 19 23 28 33 40 39 37 30 22 18 18 21 24 28 35 45 54 62 67 65 60 58 60 57 48 40 38 42 49 51 50 48 40 30 26 27 28 30 38 50 63 66 60 53 47 42 40 39 36 30 26 27 32 38 51 50 48 40 30 26 27 28 30 38 50 63 66 60 53 47 42 40 39 36 30 26 27 32 38 40 39 37 30 22 18 18 21 24 28 35 45 54 62 67 65 60 58 60 57 48 40 38 42 49 55 58 60 54 46 44 46 44 45 53 64 70 66 52 40 33 30 28 25 21 18 19 23 28 33 33 32 31 25 19 17 19 24 27 26 25 30 41 57 71 77 74 72 74 72 61 50 45 46 51 49 61 72 72 66 67 68 65 63 69 74 71 62 46 34 27 24 23 20 16 14 18 25 31 34 34 32 30 25 21 20 25 33 36 31 24 24 35 55 74 84 82 78 77 73 62 50 42 39 42 40 58 75 80 77 77 78 73 70 72 72 64 54 41 31 24 22 21 20 17 15 19 26 33 38 38 36 33 29 26 26 33 44 48 39 27 25 37 58 76 84 82 75 71 66 55 43 34 29 31 35 51 67 73 72 71 71 68 63 60 57 51 46 38 30 25 23 25 26 25 22 24 30 37 43 45 44 42 40 38 38 44 56 60 49 34 29 41 62 75 78 74 68 64 59 48 36 28 24 26 33 44 55 61 61 59 58 55 49 44 41 41 43 44 41 36 33 37 41 42 38 37 42 51 57 58 57 56 59 62 62 63 70 72 61 46 40 48 65 71 69 65 63 61 55 45 35 28 26 27 32 37 45 52 56 54 50 44 38 33 32 38 51 63 64 56 49 50 55 56 51 50 56 66 71 72 70 71 79 90 92 86 83 80 73 63 58 62 68 67 61 58 60 59 52 45 39 36 34 31 33 34 39 47 54 53 48 41 35 30 30 39 62 87 92 78 62 54 52 50 47 50 60 69 72 71 70 73 83 95 100 92 80 75 76 81 81 76 68 57 50 53 62 62 54 47 46 46 43 38 39 37 40 48 55 55 50 43 38 33 30 38 65 98 108 94 73 56 46 40 40 50 65 72 69 63 60 61 69 81 87 82 71 67 80 101 106 92 69 50 44 54 70 73 64 56 55 54 50 44 48 48 50 54 59 60 56 50 45 38 30 34 58 92 107 98 79 62 49 42 42 53 69 75 70 61 57 59 70 86 94 89 73 66 81 108 114 97 70 50 47 62 84 93 88 77 70 63 56 50 57 59 60 62 65 66 64 58 51 41 31 32 52 83 100 96 85 75 67 60 57 59 67 71 69 66 68 75 91 114 124 113 88 72 82 104 110 96 72 54 53 70 95 111 113 100 86 70 59 55 62 61 59 60 64 68 66 58 48 37 30 34 55 85 102 104 104 105 105 98 88 78 76 78 77 80 88 98 112 133 140 128 101 84 92 109 111 98 74 55 53 67 90 108 115 106 90 74 63 61 65 54 47 47 52 57 57 49 40 32 28 36 59 90 109 117 129 141 146 138 123 111 109 110 108 111 119 124 125 136 140 132 112 101 111 125 123 106 77 54 49 60 78 93 102 98 88 77 72 69 58 42 32 30 35 40 43 41 37 32 29 36 59 91 112 121 134 146 149 140 133 134 147 154 149 147 149 146 138 141 143 136 118 107 114 125 121 103 72 49 44 55 73 87 97 100 94 86 79 70 50 33 22 19 22 28 35 41 42 38 33 38 62 95 112 115 115 117 116 116 121 136 157 167 160 150 145 141 138 145 145 133 112 95 91 94 90 77 57 42 41 57 78 92 104 111 106 93 79 65 44 29 20 17 19 24 32 39 41 38 33 43 75 115 130 123 103 90 89 97 107 118 131 140 135 127 121 120 126 136 134 123 105 88 72 63 58 52 44 39 44 60 82 96 105 108 99 85 71 58 44 31 22 20 22 25 30 33 34 30 30 46 89 138 155 141 106 81 78 87 91 89 90 95 99 101 102 104 111 117 114 107 101 91 70 51 43 41 41 44 51 65 82 94 97 90 77 66 60 54 44 33 26 26 30 32 33 32 31 27 27 44 84 129 146 134 103 83 79 81 74 63 55 57 67 82 94 102 107 106 98 94 94 91 71 52 43 42 44 49 56 67 80 88 87 73 58 50 50 50 42 35 32 34 38 39 38 35 32 28 26 36 62 91 103 101 92 86 82 73 57 42 32 33 48 73 96 110 113 105 92 83 80 77 65 55 53 50 45 44 49 58 68 75 72 59 46 40 41 43 42 40 39 41 41 39 36 32 30 26 23 27 40 55 65 72 79 85 80 63 43 29 21 23 40 71 101 119 119 107 91 76 64 58 56 63 69 62 46 37 37 42 50 54 53 46 39 35 37 40 44 45 48 47 43 37 31 28 27 25 22 23 30 40 48 56 67 75 70 53 36 25 20 23 39 68 99 118 119 106 87 69 55 51 59 78 89 76 50 33 28 31 35 37 37 33 32 34 39 42 48 51 56 55 48 40 35 31 29 28 25 25 32 41 47 52 61 65 59 46 36 29 26 30 43 66 88 105 109 98 80 65 59 63 79 102 111 91 56 33 26 26 28 29 27 25 27 34 43 47 48 52 58 58 55 53 51 46 42 38 34 34 40 47 51 55 63 64 56 46 41 39 38 43 56 73 82 90 94 91 83 77 83 99 118 135 135 107 64 37 27 26 27 28 26 23 25 33 43 47 49 51 55 57 63 71 75 72 67 62 55 53 54 53 52 57 67 68 60 54 52 52 51 56 70 83 83 81 83 89 95 102 119 141 155 158 148 116 71 40 30 30 31 32 31 29 29 35 42 47 61 61 60 63 75 90 100 106 108 105 96 89 78 61 49 49 56 58 55 53 53 54 53 58 69 78 76 73 75 87 101 114 130 146 151 144 132 106 70 45 37 40 42 42 42 41 41 43 48 55",
"7 6 5 5 5 5 5 5 5 5 6 5 5 6 5 5 5 5 5 5 6 6 6 7 6 5 4 4 4 4 4 4 4 5 5 5 5 6 7 7 7 7 7 7 7 8 9 9 10 9 8 7 6 6 5 5 5 5 5 5 5 5 4 4 3 3 3 3 3 4 4 4 4 4 4 3 3 3 3 3 3 3 3 4 4 4 5 6 7 8 8 8 8 8 8 10 11 11 11 11 8 7 7 6 6 6 5 5 4 4 5 5 4 3 2 2 2 2 2 3 3 3 3 3 2 2 2 2 2 2 2 2 2 3 3 3 4 5 6 7 7 7 7 7 9 10 11 11 10 9 7 6 6 7 7 7 6 5 4 4 5 5 4 3 2 1 1 2 2 2 3 3 3 3 2 2 3 3 2 2 1 1 2 2 2 3 3 4 5 5 6 7 7 7 8 10 10 9 8 7 5 5 6 7 8 8 7 5 4 4 5 6 6 4 3 2 2 2 2 2 3 3 3 3 3 3 4 3 3 2 1 2 2 2 3 3 4 4 4 5 6 8 8 8 7 7 7 7 6 5 4 4 5 6 7 8 7 6 5 5 6 7 7 5 3 3 2 2 2 3 3 4 4 4 4 4 5 4 3 2 2 3 3 4 4 4 5 4 4 4 6 9 10 9 7 6 5 5 4 4 4 4 4 5 6 7 7 6 5 5 6 7 6 5 4 4 3 3 3 4 4 5 5 5 6 6 6 6 5 4 3 4 6 6 6 5 5 5 4 5 7 10 12 10 7 5 4 4 4 4 4 3 3 4 5 6 6 6 5 5 5 5 5 4 4 4 4 4 5 5 5 5 6 6 7 8 8 8 7 6 5 6 7 8 7 6 5 5 4 5 6 9 10 8 6 4 4 4 4 4 4 4 4 4 5 6 6 6 5 4 4 3 3 3 4 4 5 5 6 6 6 5 5 6 8 9 9 9 9 8 8 8 8 8 8 6 5 5 4 4 5 6 7 6 4 4 4 5 5 5 5 5 5 5 6 7 6 5 4 3 3 2 2 3 3 4 5 6 7 7 6 5 5 6 7 8 8 8 9 10 10 9 8 8 8 8 7 6 5 5 5 6 6 5 4 5 6 7 7 6 6 5 5 6 6 7 6 5 3 3 2 2 3 4 4 4 5 6 8 8 7 5 5 6 6 7 6 7 9 11 11 10 9 9 9 10 9 8 7 6 6 6 6 5 5 6 7 9 8 7 7 6 5 6 7 7 7 5 4 3 2 3 4 6 7 6 6 7 8 9 8 6 5 5 6 6 5 6 7 9 10 10 9 9 9 10 9 8 7 7 7 6 5 5 5 6 7 9 9 8 8 6 6 7 9 10 9 7 6 4 4 4 7 9 10 9 8 8 8 9 8 7 5 5 5 5 4 4 5 7 7 7 7 7 7 7 7 7 8 9 8 6 5 4 4 5 6 8 9 9 8 7 7 9 11 12 12 10 8 7 6 6 8 11 13 12 10 9 9 8 7 6 5 5 5 4 3 3 3 4 4 4 4 5 5 5 5 6 9 10 9 7 5 4 4 5 6 7 8 9 8 8 8 9 11 12 11 10 9 8 8 8 10 12 13 12 10 9 9 8 6 4 4 4 4 3 3 3 3 3 3 3 3 3 3 4 4 6 9 11 10 7 5 5 6 7 8 8 8 8 8 8 8 8 8 9 9 8 8 8 9 9 10 11 12 10 9 8 8 7 5 3 3 3 3 3 3 3 3 2 2 2 3 3 3 3 4 5 7 9 8 6 5 6 9 11 11 10 9 8 8 7 7 7 7 7 7 7 7 7 8 8 9 10 9 8 7 7 7 6 4 3 2 3 3 4 4 4 4 3 2 3 3 3 3 3 4 4 6 7 6 5 4 7 11 14 14 12 10 9 7 6 6 7 7 7 7 7 7 7 6 6 6 7 7 7 6 7 7 6 4 3 3 3 4 4 5 5 4 4 3 3 4 4 4 4 4 4 5 5 5 4 4 7 11 14 14 12 10 9 6 5 6 7 8 8 8 7 7 6 5 4 4 5 5 6 6 7 7 5 4 3 3 4 4 4 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 6 9 11 10 9 8 7 4 4 4 6 7 7 6 6 5 4 3 3 3 3 4 4 4 5 5 4 3 2 2 3 4 4 5 6 6 6 7 6 5 5 5 5 5 4 3 3 3 3 4 5 6 7 6 5 5 4 2 2 3 4 5 4 4 4 4 3 2 2 2 3 3 3 3 3 3 2 1 1 2 2 3 4 5 7 7 8 8 7 6 4 4 4 5 4 3 2 2 3 3 4 4 4 3 3 3 3 2 2 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 2 2 2 1 1 1 2 3 4 6 7 8 8 8 7 5 4 3 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 3 3 3 4 3 3 2 2 2 3 3 3 3 3 2 2 1 1 2 2 3 5 6 7 7 7 7 6 5 4 3 3 3 2 2 1 1 1 2 2 2 2 2 1 1 1 2 2 2 3 3 4 4 4 4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 3 5 6 7 7 6 6 5 4 4 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 4 4 4 4 4 4 4 3 3 3 3 2 2 2 2 3 3 3 3 2 2 2 3 4 5 6 5 5 5 4 4 4 3 3 3 2 2 2 2 2 2 3 3 3 2 2 2 2 4 5 6 5 5 5 4 4 4 3 3 3 2 2 2 2 2 2 3 3 3 2 2 2 2 3 4 4 4 4 4 4 4 4 3 3 3 3 2 2 2 2 3 3 3 3 2 2 2 3 5 6 7 7 6 6 5 4 4 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 4 4 4 4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 3 5 6 7 7 7 7 6 5 4 3 3 3 2 2 1 1 1 2 2 2 2 2 1 1 1 1 2 2 2 3 3 3 4 3 3 2 2 2 3 3 3 3 3 2 2 1 1 2 2 3 4 6 7 8 8 8 7 5 4 3 4 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 2 2 2 3 3 3 3 2 2 2 1 1 1 2 3 4 5 7 7 8 8 7 6 4 4 4 5 4 3 2 2 3 3 4 4 4 3 3 3 3 2 2 3 4 5 4 4 4 4 3 2 2 2 3 3 3 3 3 3 2 1 1 2 2 3 4 5 6 6 6 7 6 5 5 5 5 5 4 3 3 3 3 4 5 6 7 6 5 5 4 4 4 4 6 7 7 6 6 5 4 3 3 3 3 4 4 4 5 5 4 3 2 2 3 4 4 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 6 9 11 10 9 8 7 6 5 6 7 8 8 8 7 7 6 5 4 4 5 5 6 6 7 7 5 4 3 3 4 4 4 5 5 4 4 3 3 4 4 4 4 4 4 5 5 5 4 4 7 11 14 14 12 10 9 7 6 6 7 7 7 7 7 7 7 6 6 6 7 7 7 6 7 7 6 4 3 3 3 4 4 4 4 4 3 2 3 3 3 3 3 4 4 6 7 6 5 4 7 11 14 14 12 10 9 8 7 7 7 7 7 7 7 7 7 8 8 9 10 9 8 7 7 7 6 4 3 2 3 3 3 3 3 3 2 2 2 3 3 3 3 4 5 7 9 8 6 5 6 9 11 11 10 9 8 8 8 8 8 8 9 9 8 8 8 9 9 10 11 12 10 9 8 8 7 5 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 6 9 11 10 7 5 5 6 7 8 8 8 8 8 8 8 9 11 12 11 10 9 8 8 8 10 12 13 12 10 9 9 8 6 4 4 4 4 4 3 3 3 4 4 4 4 5 5 5 5 6 9 10 9 7 5 4 4 5 6 7 8 9 8 7 7 9 11 12 12 10 8 7 6 6 8 11 13 12 10 9 9 8 7 6 5 5 5 5 4 4 5 7 7 7 7 7 7 7 7 7 8 9 8 6 5 4 4 5 6 8 9 9 8 6 6 7 9 10 9 7 6 4 4 4 7 9 10 9 8 8 8 9 8 7 5 5 5 6 5 6 7 9 10 10 9 9 9 10 9 8 7 7 7 6 5 5 5 6 7 9 9 8 7 6 5 6 7 7 7 5 4 3 2 3 4 6 7 6 6 7 8 9 8 6 5 5 6 7 6 7 9 11 11 10 9 9 9 10 9 8 7 6 6 6 6 5 5 6 7 9 8 7 6 5 5 6 6 7 6 5 3 3 2 2 3 4 4 4 5 6 8 8 7 5 5 6 6 8 8 8 9 10 10 9 8 8 8 8 7 6 5 5 5 6 6 5 4 5 6 7 7 6 5 5 5 5 6 7 6 5 4 3 3 2 2 3 3 4 5 6 7 7 6 5 5 6 7 9 9 9 9 8 8 8 8 8 8 6 5 5 4 4 5 6 7 6 4 4 4 5 5 5 4 4 4 4 5 6 6 6 5 4 4 3 3 3 4 4 5 5 6 6 6 5 5 6 8 8 8 8 7 6 5 6 7 8 7 6 5 5 4 5 6 9 10 8 6 4 4 4 4 4 4 3 3 4 5 6 6 6 5 5 5 5 5 4 4 4 4 4 5 5 5 5 6 6 7 6 6 6 5 4 3 4 6 6 6 5 5 5 4 5 7 10 12 10 7 5 4 4 4 4 4 4 4 5 6 7 7 6 5 5 6 7 6 5 4 4 3 3 3 4 4 5 5 5 6 4 5 4 3 2 2 3 3 4 4 4 5 4 4 4 6 9 10 9 7 6 5 5 4 4 4 4 5 6 7 8 7 6 5 5 6 7 7 5 3 3 2 2 2 3 3 4 4 4 4 3 4 3 3 2 1 2 2 2 3 3 4 4 4 5 6 8 8 8 7 7 7 7 6 5 5 5 6 7 8 8 7 5 4 4 5 6 6 4 3 2 2 2 2 2 3 3 3 3 3 2 3 3 2 2 1 1 2 2 2 3 3 4 5 5 6 7 7 7 8 10 10 9 8 7 7 6 6 7 7 7 6 5 4 4 5 5 4 3 2 1 1 2 2 2 3 3 3 3 2 2 2 2 2 2 2 2 2 3 3 3 4 5 6 7 7 7 7 7 9 10 11 11 10 9 8 7 7 6 6 6 5 5 4 4 5 5 4 3 2 2 2 2 2 3 3 3 3 3 2 3 3 3 3 3 3 3 3 4 4 4 5 6 7 8 8 8 8 8 8 10 11 11 11 11 8 7 6 6 5 5 5 5 5 5 5 5 4 4 3 3 3 3 3 4 4 4 4 4 4 5 4 4 4 4 4 4 4 5 5 5 5 6 7 7 7 7 7 7 7 8 9 9 10 9 7 6 5 5 5 5 5 5 5 5 6 5 5 6 5 5 5 5 5 5 6 6 6 7 6",
"50 50",
"1"
]

rng_CARDINALS = copy.copy(CARDINALS)
_productions = []
_width = -1
_height = -1
playerTag = -1

def serializeMoveSet(moves):
	returnString = ""
	for move in moves:
		returnString += str(move.loc.x) + " " + str(move.loc.y) + " " + str(move.getDirections()) + " "
	return returnString

def deserializeMapSize(inputString):
	splitString = inputString.split(" ")

	global _width, _height
	_width = int(splitString.pop(0))
	_height = int(splitString.pop(0))

production_min_set = []
def deserializeProductions(inputString):
	global production_min_set
	splitString = inputString.split(" ")
	
	min = 100

	for a in range(0, _height):
		row = []
		for b in range(0, _width):
			prod = int(splitString.pop(0))
			if prod <= min:
				if prod < min:
					production_min_set = []
				production_min_set.append((b,a))
			row.append(prod)
		_productions.append(row)
		
def mark_neighbors(map, loc, type):
	# shuffle(rng_CARDINALS)
	# myCards = copy.copy(rng_CARDINALS)
	for dir in CARDINALS:
		new_loc = map.getLocation(loc, dir)
		new_site = new_loc.site
		getattr(new_site, type).append(Move(loc, dir))
		type_list = getattr(new_site, type)
		
		# map_logger.debug("New %s list for %s: %s" % (type, new_loc,debug_list(type_list)) )
		
def increment_neighbors(map, loc, owner):
	# raise Exception("I should only both with these neighbors if they were either the fringe or frontier of a territory last round - that'll save a lot of time")
	curr_site = map.getSite(loc)
	if owner != 0:
		# logger.debug("Found location %s with owner %s (should be %s and %s)" % (loc.site.loc, loc.site.owner, loc, owner))
		pass
	if owner > 0:
		t = map.getTerritory(owner)
		t.addLocation(curr_site)
	
	if owner == playerTag:
		type = "friends"
	elif owner == 0: 
		type = "neutrals"
		# if curr_site.strength == 0:
			# type = "empties"
			# mark_neighbors(map, loc, type)
	else:
		type = "enemies"
	# map_logger.debug("Increment_neighbors neighbors of %s with type %s" % (loc, type))
	mark_neighbors(map, loc, type)

def deserializeMap(m, inputString):
	logger.debug("Deserializing board")
	splitString = inputString.split(" ")


	y = 0
	x = 0
	counter = 0
	owner = 0
	for a in range(0, _height):
		for b in range(0, _width):
			m.contents[a][b].production = _productions[a][b]
	
	while y != m.height:
		counter = int(splitString.pop(0))
		owner = int(splitString.pop(0))
		
		for a in range(0, counter):
			#map_logger.debug("%s,%s" % (y,x))
			if owner != 0:
				# logger.debug("Found location %s, %s with owner %s" % (x, y, owner))
				pass
			m.contents[y][x].owner = owner
			if owner != 0:
				# logger.debug("Set site for %s, %s to owner %s" % (x, y, m.contents[y][x].owner))
				pass
			#map_logger.debug("Retrieving Loc")
			loc = m.getLocationXY(x,y)
			if owner != 0:
				# logger.debug("Retrieved location %s with owner %s (should be %s and %s)\n" % (loc.site.loc, loc.site.owner, loc, owner))
				pass
			if True or owner > 0:
				increment_neighbors(m, loc, owner)
				m.updateCounts(owner, loc)
			if owner != 0:
				# logger.debug("Found location %s with owner %s (should be %s and %s)\n" % (loc.site.loc, loc.site.owner, loc, owner))
				pass
			x += 1
			if x == m.width:
				x = 0
				y += 1
		
	for a in range(0, _height):
		for b in range(0, _width):
			m.contents[a][b].strength = int(splitString.pop(0))
			m.contents[a][b].projected_str = m.contents[a][b].strength
			# m.contents[a][b].production = _productions[a][b]

	logger.debug("Deserializing complete")
	return m

def sendString(toBeSent):
	toBeSent += '\n'

	sys.stdout.write(toBeSent)
	sys.stdout.flush()

def getStringTest():
	s = test_inputs.pop()
	map_logger.debug("Got String(): %s" % s)
	return s
	
def getString():
	line = sys.stdin.readline().rstrip('\n')
	map_logger.debug("%s" % line)
	return line

	
local_maxima = None
def getInit(getString=getString):
	global playerTag
	map_logger.debug("Game State:")
	playerTag = int(getString())
	deserializeMapSize(getString())
	deserializeProductions(getString())
	map_logger.debug("Finished Map init")
	m = GameMap(_width, _height, playerTag = playerTag)
	
	map_logger.debug("Caching map relations")
	for y in range(m.height):
		for x in range(m.width):
			l = m.getLocationXY(x,y)
			for dir in CARDINALS:
				m.getLocation(l, dir)
	
	deserializeMap(m, getString())
	
	# global local_maxima
	# local_maxima = m.findLocalMaxima(production_min_set)
	
	return (playerTag, m)

def sendInit(name):
	sendString(name)

def getFrame(test_string = None):
	m = GameMap(_width, _height, playerTag = playerTag)
	if test_string:
		deserializeMap(m, test_string)
	else:
		deserializeMap(m, getString())
	m.defineTerritories()
	m.local_maxima = local_maxima
	return m

def sendFrame(moves):
	sendString(serializeMoveSet(moves))
	
def testBot():
	myID, gameMap = getInit(getStringTest)
	global _productions
	global _width
	global _height
	global playerTag
	_productions = []
	_width = -1
	_height = -1	
	playerTag = -1
	